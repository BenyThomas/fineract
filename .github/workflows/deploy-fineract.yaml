name: Build & Deploy Fineract

on:
  push:
    branches: [ main ]
    paths:
      - '**.gradle*'
      - 'gradle/**'
      - 'fineract-provider/**'
      - 'build.gradle*'
      - 'settings.gradle*'
      - 'Dockerfile'
      - 'k8s/**'
      - '.github/workflows/deploy-fineract.yml'
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/fineract
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full history with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Java 21 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Build boot jar
        run: |
          ./gradlew --no-daemon -Dorg.gradle.workers.max=1 \
            -Dorg.gradle.jvmargs="-Xmx2g -XX:+UseG1GC -Dfile.encoding=UTF-8" \
            :fineract-provider:bootJar
          ls -l fineract-provider/build/libs

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:main
          build-args: |
            JAR_PATH=fineract-provider/build/libs

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      # Upload k8s/ to the server so we can apply the overlay (keeps "infra as code")
      - name: Checkout k8s manifests
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: |
            k8s

      - name: Upload k8s dir to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "k8s/**"
          target: "/tmp/fineract-k8s"
          overwrite: true

      - name: Apply k8s overlay & roll out
        uses: appleboy/ssh-action@v1.2.0
        env:
          IMAGE: ghcr.io/${{ github.repository_owner }}/fineract:main
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            # Apply manifests from the uploaded overlay
            /snap/bin/microk8s.kubectl -n kazy-prod apply -k /tmp/fineract-k8s/overlays/prod

            # Ensure the Deployment points to the freshly built image
            /snap/bin/microk8s.kubectl -n kazy-prod set image deploy/fineract-server \
              fineract-server=${IMAGE}

            # Wait for rollout to complete
            /snap/bin/microk8s.kubectl -n kazy-prod rollout status deploy/fineract-server --timeout=10m

            # Optional: brief status summary
            /snap/bin/microk8s.kubectl -n kazy-prod get pods,svc,ing -o wide
